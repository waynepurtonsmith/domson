{
  "version": 3,
  "sources": ["../src/traverse.ts"],
  "sourcesContent": ["import type { Element, Schema } from './schema'\r\n\r\nexport const traverse = <T>(contents: Element, schema: Schema<T>): T => {\r\n  if (Array.isArray(schema)) {\r\n    if (schema.length !== 2 || typeof schema[0] !== 'string' || typeof schema[1] !== 'function') {\r\n      throw new Error('Invalid schema for array, expected structure: [selector, callback]')\r\n    }\r\n\r\n    const [selector, callback] = schema\r\n\r\n    const matchingElement = contents.find(selector)\r\n\r\n    return matchingElement.map((i) => traverse(\r\n      matchingElement.eq(i),\r\n      callback(matchingElement.eq(i))\r\n    )).get() as T\r\n  }\r\n\r\n  if (typeof schema === 'string') {\r\n    return contents.find(schema).first().text().trim() as T\r\n  }\r\n\r\n  if (typeof schema === 'function') {\r\n    return schema(contents)\r\n  }\r\n\r\n  const result = {} as T\r\n\r\n  for (const key in schema) {\r\n    result[key] = traverse(contents, schema[key])\r\n  }\r\n\r\n  return result\r\n}"],
  "mappings": "+EAEO,IAAMA,EAAWC,EAAA,CAAIC,EAAmBC,IAAyB,CACtE,GAAI,MAAM,QAAQA,CAAM,EAAG,CACzB,GAAIA,EAAO,SAAW,GAAK,OAAOA,EAAO,CAAC,GAAM,UAAY,OAAOA,EAAO,CAAC,GAAM,WAC/E,MAAM,IAAI,MAAM,oEAAoE,EAGtF,GAAM,CAACC,EAAUC,CAAQ,EAAIF,EAEvBG,EAAkBJ,EAAS,KAAKE,CAAQ,EAE9C,OAAOE,EAAgB,IAAKC,GAAMP,EAChCM,EAAgB,GAAGC,CAAC,EACpBF,EAASC,EAAgB,GAAGC,CAAC,CAAC,CAChC,CAAC,EAAE,IAAI,CACT,CAEA,GAAI,OAAOJ,GAAW,SACpB,OAAOD,EAAS,KAAKC,CAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAGnD,GAAI,OAAOA,GAAW,WACpB,OAAOA,EAAOD,CAAQ,EAGxB,IAAMM,EAAS,CAAC,EAEhB,QAAWC,KAAON,EAChBK,EAAOC,CAAG,EAAIT,EAASE,EAAUC,EAAOM,CAAG,CAAC,EAG9C,OAAOD,CACT,EA/BwB",
  "names": ["traverse", "__name", "contents", "schema", "selector", "callback", "matchingElement", "i", "result", "key"]
}
